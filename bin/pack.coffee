#!/usr/bin/env coffee

Snockets = require 'snockets'
program  = require 'commander'
events   = require 'events'
fs       = require 'fs'
path     = require 'path'

dispatcher = new events.EventEmitter

program
  .version('0.0.2')
  .option('-w, --watch <directory>',  'Directory to watch file changes within')
  .option('-o, --output <directory>', 'Directory to output changed files')
  .option('-i, --input <file>',       'Input file')
  .option('-m, --minify',             'Minify the JavaScript output')
  .parse(process.argv)

config =
  minify : !!program.minify
  watch  : program.watch
  output : program.output

merge =
  single: (file, callback) ->
    snockets   = new Snockets()

    that       = @
    js         = snockets.getConcatenation file, { minify: config.minify, async: false }
    result     = "// Generated by CoffeeScript#{ if program.minify then ', minified with UglifyJS' else '' }\n#{ js }"
    
    outputFile = path.resolve(config.output, path.basename(file, '.coffee')) + '.js'

    if config.output
      fs.writeFile outputFile, result, (err) ->
        console.log err if err

        now = new Date

        console.log "[#{ that.padZero now.getHours() }:#{ that.padZero now.getMinutes() }:#{ that.padZero now.getSeconds() }] Updated #{ outputFile }"
        callback?()
    else
      console.log result
      callback?()
          
  batch: ->
    for file in @topLevelFiles
      @single file

  watchDir: (directory, callback) ->
    that = @

    fs.readdir directory, (err, files) ->
      for file in files
        fullPath = path.resolve directory, file

        do (fullPath) ->
          fs.stat fullPath, (err, stats) ->
            if stats.isDirectory()
              merge.watchDir fullPath, callback 
            else
              dispatcher.emit 'topLevelFile:added', fullPath if path.dirname(fullPath) is path.resolve(config.watch)

    fs.watch directory, (event, fileName) ->
      callback?()

  padZero: (number) ->
    (if number < 10 then '0' else '') + number

  topLevelFiles: []

dispatcher.on 'mode:compile', (params) ->
  merge.single params.file, ->
    dispatcher.emit 'exit'

dispatcher.on 'mode:watch', (params) ->
  unless path.existsSync config.output
    fs.mkdirSync config.output

  merge.watchDir params.directory, ->
    merge.batch()

dispatcher.on 'topLevelFile:added', (path) ->
  merge.topLevelFiles.push path
  merge.batch()

dispatcher.on 'exit', ->
  process.exit()

# Initialization
if program.watch
  dispatcher.emit 'mode:watch',
    directory : program.watch
    output    : program.output
else
  dispatcher.emit 'mode:compile',
    file   : program.input
